  <style>
    #map {
      height: 100%;
    }

    /* Optional: Makes the sample page fill the window. */
    html,
    body {
      height: 100%;
      margin: 0;
      padding: 0;
    }
  </style>
  <script>

    function initMap() {
      let marker = [];
      const jdata = JSON.parse(gon.json);
      const infoWindow = [];

      const myLatLng = { lat: 35.66611504149469, lng: 139.7763242422632 };
      const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 15,
        center: myLatLng,
      });

          // マーカー毎の処理
    for (var i = 0; i < jdata.length; i++) {
            markerLatLng = new google.maps.LatLng({lat: JSON.parse(jdata[i]['latlng'])['lat'], lng: JSON.parse(jdata[0]['latlng'])['lng']}); // 緯度経度のデータ作成
            marker[i] = new google.maps.Marker({ // マーカーの追加
            position: markerLatLng, // マーカーを立てる位置を指定
            map: map // マーカーを立てる地図を指定
          });

          const contentString = '<div class="card w-96 bg-base-100 shadow-xl">'+
                  '<div class="card-body">'+
                    '<h2 class="font-bold text-lg">'+jdata[i]["title"]+'</h2>'+
                    '<p class="text-lg">'+jdata[i]["body"]+'</p>'+
                  '</div>'+
                '</div>'
    
          infoWindow[i] = new google.maps.InfoWindow({ // 吹き出しの追加
              content: contentString // 吹き出しに表示する内容
            });    
        markerEvent(i); // マーカーにクリックイベントを追加
    }
    
    // マーカーにクリックイベントを追加
    function markerEvent(i) {
        marker[i].addListener('click', function() { // マーカーをクリックしたとき
          infoWindow[i].open(map, marker[i]); // 吹き出しの表示
      });
    }

      map.addListener("click", addLatLng);

      function addLatLng(event) {
        const lat = event.latLng.lat();
        const lng = event.latLng.lng();
        const data = {
          lat,
          lng
        }

        document.getElementById('latlng').value = JSON.stringify(data) ;
        
        const newMarker = new google.maps.Marker({
          position: event.latLng,
          map: map,
      });

    const newContentString = "<label for='my-new-modal' class='btn modal-button'>ここにレビューを書く</label>"

      const newInfowindow = new google.maps.InfoWindow({
          content: newContentString,
        });

        newMarker.addListener("click", () => {
            newInfowindow.open({
              anchor: newMarker,
              map,
              shouldFocus: true,
            });
          });
      
    };
  }
  </script>
  <script>
    // console.log(gon.json)
    // const jdata = JSON.parse(gon.json)
    // console.log(jdata[0]["latlng"])

</script>
  <div id="map"></div>

  <input type="checkbox" id="my-new-modal" class="modal-toggle" />
  <div class="modal">
    <div class="modal-box">

    <h3 class="font-bold text-lg">レビュー作成</h3>
    <%= form_with model: @post,class:'new_post',local: true do |f|%>
    <turbo-frame id="post_error"></turbo-frame>
      <div>
        <%= f.label :title %>
        <%= f.text_field :title,class:'input input-bordered input-warning w-full' %>
        <%= f.label :body %>
        <%= f.text_area :body,class:'textarea textarea-warning w-full', rows: 5  %>
        <%= f.hidden_field :latlng,class:'input input-bordered input-warning w-full', id: 'latlng' %>
      </div>
      <%= f.submit class:'btn'%>
      <label for="my-new-modal" class="btn">閉じる!</label>
    <%end%> 

    </div>
  </div>

  <!-- 
    The `defer` attribute causes the callback to execute after the full HTML
    document has been parsed. For non-blocking uses, avoiding race conditions,
    and consistent behavior across browsers, consider loading using Promises
    with https://www.npmjs.com/package/@googlemaps/js-api-loader.
  -->
  <script
    src="https://maps.googleapis.com/maps/api/js?key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap&v=weekly"
    defer
  ></script>