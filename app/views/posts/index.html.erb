<div id="map"></div>

<%= render 'search'%>

<%= render 'bottom_nav'%>

<%= render partial: 'post', collection: @posts %>

<%= render 'form'%>

    <script>

    function initMap() {
      // 初期位置
      const Tokyo = { lat: 35.681427904704975, lng: 139.76717844133614 };
      const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 15,
        center: Tokyo,
        disableDefaultUI: true,
        gestureHandling: 'greedy',
      });

      // 現在位置が取得できるとき初期位置に設定
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            //　現在位置を取得
            currentPosition = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };
            // 現在位置は黄色の丸マーク
            let currentMarker = new google.maps.Marker({
            position: currentPosition,
            map: map,
              icon: {
              fillColor: "yellow",
              fillOpacity: 0.8,
              path: google.maps.SymbolPath.CIRCLE,
              scale: 16,
              strokeColor: "black",
              strokeWeight: 1.0
            },
            });
            // 現在位置はクリックすると消えるようにする
            currentMarker.addListener("click", () => {
              currentMarker.setMap(null);
            });
            // 現在位置は中央にセット
            map.setCenter(currentPosition);
          },
          () => {
            handleLocationError(true, infoWindow, map.getCenter());
          }
        );
      } else {
        // ブラウザがGPSをサポートしていなかった場合
        handleLocationError(false, infoWindow, map.getCenter());
      }

      // 検索ボックスの初期設定
      map.controls[google.maps.ControlPosition.TOP].push(document.getElementById('bar'));
      map.controls[google.maps.ControlPosition.BOTTOM].push(document.getElementById('bar2'));
      let autocomplete = new google.maps.places.Autocomplete(document.getElementById('autoc'));
      autocomplete.bindTo('bounds', map);
      // 検索されたら中央に検索された場所が来るようにする
      autocomplete.addListener('place_changed', function() {
        let place = autocomplete.getPlace();
        if (place.geometry.viewport) {
          map.fitBounds(place.geometry.viewport);
        };
      });

      // クリックした場所にフォームを表示させる
      map.addListener("click", showPostform);
      function showPostform(event) {
        let Position = event.latLng
        // クリックした場所にマーカーを設置
        let newMarker = new google.maps.Marker({
          position: Position,
          map: map,
        });
        // 情報ウィンドウの中身はフォームのリンク
        let formLink = '<div class="show-btn">'+'<label for="my-stamp-modal" class="btn btn-warning modal-button">ここにスタンプポイントを作成する</label>'+'</div>'
        const newInfowindow = new google.maps.InfoWindow({
          content: formLink,
        });
        // クリックすると情報ウィンドウが出現
        newMarker.addListener("click", () => {
          newInfowindow.open({
            anchor: newMarker,
            map,
            shouldFocus: true,
          });
        });
        // 情報ウィンドウのバツボタンを押すとウィンドウが消えるイベントを追加
        newInfowindow.addListener( "closeclick", function ( argument ) {
          newMarker.setMap(null);
        });
        // フォームにクリックした場所の位置を送る
        let formLatLng = document.getElementById('latlng');
        formLatLng.value = JSON.stringify(Position);
      };
    };
    </script>
      
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places,geometry&key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap&v=weekly" defer></script>
