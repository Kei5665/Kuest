<div id="map"></div>

<%= render 'stamps/bottom_nav'%>

<%= render partial: 'stamps/post', collection: @posts %>

    <script>

    function initMap() {

      let marker = [];
      let jdata = JSON.parse(gon.json);
      let infoWindow = [];

      // 初期位置
      const Tokyo = { lat: 35.681427904704975, lng: 139.76717844133614 };
      const map = new google.maps.Map(document.getElementById("map"), {
        zoom: 15,
        center: Tokyo,
        disableDefaultUI: true,
        gestureHandling: 'greedy',
      });

      // 現在位置が取得できるとき初期位置に設定
      if (navigator.geolocation) {
        navigator.geolocation.getCurrentPosition(
          (position) => {
            //　現在位置を取得
            currentPosition = {
              lat: position.coords.latitude,
              lng: position.coords.longitude,
            };
            // 現在位置は黄色の丸マーク
            let currentMarker = new google.maps.Marker({
            position: currentPosition,
            map: map,
              icon: {
              fillColor: "yellow",
              fillOpacity: 0.8,
              path: google.maps.SymbolPath.CIRCLE,
              scale: 16,
              strokeColor: "black",
              strokeWeight: 1.0
            },
            });
            // 現在位置はクリックすると消えるようにする
            currentMarker.addListener("click", () => {
              currentMarker.setMap(null);
            });
            // 現在位置は中央にセット
            map.setCenter(currentPosition);
          },
          () => {
            handleLocationError(true, infoWindow, map.getCenter());
          }
        );
      } else {
        // ブラウザがGPSをサポートしていなかった場合
        handleLocationError(false, infoWindow, map.getCenter());
      }
    map.controls[google.maps.ControlPosition.BOTTOM].push(document.getElementById('bar2'));
      // 投稿データをマーカーに代入する
      for (var i = 0; i < jdata.length; i++) {
        // 投稿ごとの緯度経度
        markerLatLng = {lat: JSON.parse(jdata[i]['latlng'])['lat'], lng: JSON.parse(jdata[i]['latlng'])['lng']};
        // マーカーに投稿ごとの緯度経度を代入
        marker[i] = new google.maps.Marker({
          position: markerLatLng,
          map: map
        });
        // 情報ウィンドウには投稿情報モーダルへのリンクを入れる
        infoWindow[i] = new google.maps.InfoWindow({
          content: '<div class=show-btn>'+'<h2 class="font-bold text-lg">'+jdata[i]["title"]+'</h2>'+'<label for="my-modal-'+jdata[i]["id"]+'" class="btn btn-warning modal-button-'+jdata[i]["id"]+' mb-4">詳細をみる</label>'+'</div>'
        });
        // マーカー毎にクリックイベントを追加
        markerEvent(i);
      }

      // マーカーがクリックされたら投稿情報へのリンクを表示させる
      function markerEvent(i) {
        marker[i].addListener('click', function() { // マーカーをクリックしたとき
          infoWindow[i].open(map, marker[i]); // 吹き出しの表示
        });
      }
    };

    // 現在位置とスタンプの距離をはかる
    function calculateDistance(latlng,id){
      let stampPosition = JSON.parse(latlng)
      let calculateBtnId = id
      let stampBtnId = id + "-stamp";
      let stampValidate = document.getElementById('stamp_validate');
      let calculateBtn = document.getElementById(calculateBtnId);
      let stampBtn = document.getElementById(stampBtnId);

      let distance = google.maps.geometry.spherical.computeDistanceBetween(currentPosition, stampPosition);
      if (distance <= 50.0) {
        calculateBtn.classList.add("disable");
        stampBtn.classList.remove("disable");
        console.log(stampBtn)
      } else {
        stampValidate.classList.remove("disable");
      };
    };
    </script>
      
    <script src="https://maps.googleapis.com/maps/api/js?libraries=places,geometry&key=<%= ENV['GOOGLE_API_KEY'] %>&callback=initMap&v=weekly" defer></script>
